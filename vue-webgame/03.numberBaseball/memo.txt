script가 많아지다보니까 webpack을 배우는 어려움보다 script를 관리하는 어려움이 더 커졌을 때 webpack의 필요성이 대두된다.

webpack을 사용하려면 node.js가 필요하다.
안정적인 LTS버전을 설치할 것을 추천.

node.js를 제ㅔ대로 설치했다면 현재경로에서 terminal을 열어 node -v 로 버전을 확인.
node.js를 설치하면 따라오는 npm이라는 것이 있는데, 이게 뭐냐면 남이 만든 javascript 코드를 쓸 수 있게 하는 것.

node와 npm을 설치하면 남이 만든 자바스크립트 코드를 가져다 쓸 수 있다. 
윈도우환경에서는 powershell 보다는 cmd(명령프롬포트)를 쓰는걸 추천한다. 

현재 폴더(03.numberBaseball)에서 npm init 을 치고 패키지이름을 결정하면, 현재 폴더내에 package.json이라는 파일이 생긴다.
이 파일이 뭐냐면 내가 쓰는 남의 소스코드 정보들이 정리되는 파일이다. 
각각의 소스코드마다 버전이 있는데, 가져다 쓰는 소스코드의 양이 많아지다보면 버전관리하기가 어려워진다.
버전이나 정보를 정확히 기억하기위해서 이 package.json을 만든다.

지금까지 script로 vue.js를 사용했지만 지금부터는 npm으로 vue.js를 설치해서 사용하겠다

vue.js 설치는 현재 폴더(03.numberBaseball)에서 명령어 npm install vue 입력 ( install 대신 i 사용해도 된다)
webpack 설치는 명령어 npm i webpack webpack-cli -D (D는 옵션, 개발할때만 webpack과 webpack-cli를 쓰겠다는 의미)

현재 폴더에 node_modules 폴더와 package-lock.json파일이 생긴다. 
현재 폴더에 webpack.config.js 파일을 생성한다.
webpack.config.js에는 webpack에 대한 설정을 작성한다.

module.exports={} : node에 모듈을 만든다는 뜻 
{} 이 객체를 웹팩이 웹팩처리를 할 때 사용한다. 그것을 웹팩킹이라고 부르겠다.
이 객체안에 웹팩 설정을 다 넣으면 된다

웹팩설정은 크게 4개로 생각해라.
entry, module, plugin, output, 이 네가지가 주가되고, 나머지는 부가적인 것이다.
이 4가지의 순서는 이해를 돕기위한 순서. 

무언가를 사용할 때 그걸 왜 쓰는지 아는게 중요하다.
웹팩은 왜 쓰냐? 스크립트파일이 너무 많을 때 하나로 합치기 위해 쓴다.
스크립트들을 하나로 합칠 파일이 필요하다. 100개정도 되는 파일들 중 대표가 되는 파일이 바로 entry.

entry: {
    app: './main.js'
  },
app은 나중에 하나로 합쳐질 파일의 이름. main.js외 스크립트 일동 100개가 하나로 합쳐진 app.js가 된다.
그것을 output에 작성해준다

output: {
    filename: 'app.js'
  }

filename을 쓸 때는 'app.js'를 '[name].js'라고도 쓸 수 있다. 

output: {
    filename: 'app.js', 
    path: './dist'
  }
나중에 dist라는 폴더가 생기고, 그 안에 app.js가 최종결과물로 나올 것이다.